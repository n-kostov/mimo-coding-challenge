// <auto-generated />
using System;
using LearningCenter.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearningCenter.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(LearningCenterDbContext))]
    partial class LearningCenterDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("LearningCenter.Domain.Models.Achievements.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Goal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TargetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Achievements", (string)null);
                });

            modelBuilder.Entity("LearningCenter.Domain.Models.Courses.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Chapters", (string)null);
                });

            modelBuilder.Entity("LearningCenter.Domain.Models.Courses.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("LearningCenter.Domain.Models.Courses.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChapterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("Lessons", (string)null);
                });

            modelBuilder.Entity("LearningCenter.Domain.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("LearningCenter.Domain.Models.Courses.Chapter", b =>
                {
                    b.HasOne("LearningCenter.Domain.Models.Courses.Course", null)
                        .WithMany("Chapters")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LearningCenter.Domain.Models.Courses.Lesson", b =>
                {
                    b.HasOne("LearningCenter.Domain.Models.Courses.Chapter", null)
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("LearningCenter.Domain.Models.Users.User", b =>
                {
                    b.OwnsMany("LearningCenter.Domain.Models.Users.LessonCompleted", "LessonsCompleted", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("CompletedOn")
                                .HasColumnType("TEXT");

                            b1.Property<int>("LessonId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("StartedOn")
                                .HasColumnType("TEXT");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("LessonCompleted");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("LearningCenter.Domain.Models.Users.UserAchievement", "Achievements", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<int>("AchievementId")
                                .HasColumnType("INTEGER");

                            b1.Property<bool>("IsCompleted")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Progress")
                                .HasColumnType("INTEGER");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("UserAchievement");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Achievements");

                    b.Navigation("LessonsCompleted");
                });

            modelBuilder.Entity("LearningCenter.Domain.Models.Courses.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("LearningCenter.Domain.Models.Courses.Course", b =>
                {
                    b.Navigation("Chapters");
                });
#pragma warning restore 612, 618
        }
    }
}
